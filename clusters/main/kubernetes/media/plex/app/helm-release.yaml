---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: plex
  namespace: plex
spec:
  interval: 15m
  chart:
    spec:
      chart: plex
      version: 19.6.1
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
  timeout: 20m
  maxHistory: 3
  driftDetection:
    mode: warn
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    TZ: America/Montreal
    global:
      stopAll: false

    imagemaidImage:
      repository: kometateam/imagemaid
      tag: v1.1.1@sha256:fbec331b36c1473f8a9c4214f55e5b097860476c8a5274eb61a2b85df89e56cc
      pullPolicy: IfNotPresent

    credentials:
      backblaze:
        type: s3
        url: ${BUCKET_URL}
        bucket: ${BUCKET_NAME}
        accessKey: ${BUCKET_ACCESSKEY}
        secretKey: ${BUCKET_SECRETKEY}
        encrKey: ${BUCKET_ENCRKEY}

    service:
      main:
        type: LoadBalancer
        loadBalancerIP: ${LOAD_BALANCER_PLX}
      imagemaid:
        enabled: true
        type: ClusterIP
        ports:
          imagemaid:
            enabled: true
            targetSelector: imagemaid
            protocol: http
            port: 3000

    ingress:
      main:
        enabled: true
        integrations:
          traefik:
            enabled: true
            middlewares:
              - name: auth
                namespace: traefik
        tls:
          - hosts:
            - plex.${DOMAIN_0}
            clusterIssuer: domain-0-wildcard
        hosts:
          - host: plex.${DOMAIN_0}

    persistence:
      config:
        size: 256Gi
        targetSelectAll: true
        volsync:
          - name: cfg
            type: restic
            cleanupCachePVC: true
            credentials: backblaze
            dest:
              enabled: true
            src:
              enabled: true
              trigger:
                schedule: 0 3 * * *
      media:
        enabled: true
        type: nfs
        mountPath: /media
        server: ${NFS_SERVER_0}
        path: ${DATASET_MEDIA}
      overseerr:
        enabled: true
        type: nfs
        mountPath: /overseerr
        server: ${NFS_SERVER_0}
        path: ${DATASET_OVERSEERR}/overseerr

    plex:
      serverIP: ${LOAD_BALANCER_PLX}

    resources:
        limits:
            nvidia.com/gpu: 1

    workload:
      main:
        podSpec:
          runtimeClassName: nvidia
          containers:
            main:
              env:
                ALLOWED_NETWORKS: ${ALLOWED_NETWORKS}
                PLEX_CLAIM: ${PLEX_CLAIM}
            imagemaid:
              enabled: true
              primary: false
              imageSelector: imagemaidImage
              env:
                PLEX_PATH: /config/Library/Application Support/Plex Media Server
                LOCAL_DB: False
                MODE: remove
                SCHEDULE: "" # 05:00|daily
                PLEX_URL: http://plex.plex.svc.cluster.local:32400
                PLEX_TOKEN: ${PLEX_TOKEN}
                DISCORD: ${DISCORD_WEBHOOK_0}
                TIMEOUT: 86400
                SLEEP: 60
                IGNORE_RUNNING: False
                USE_EXISTING: False
                PHOTO_TRANSCODER: True
                EMPTY_TRASH: True
                CLEAN_BUNDLES: True
                OPTIMIZE_DB: True
                TRACE: False
                LOG_REQUESTS: True
              probes:
                liveness:
                  enabled: true
                  type: "{{ .Values.service.main.ports.imagemaid.protocol }}"
                  port: "{{ $.Values.service.main.ports.imagemaid.targetPort | default .Values.service.main.ports.imagemaid.port }}"
                readiness:
                  enabled: true
                  type: "{{ .Values.service.main.ports.imagemaid.protocol }}"
                  port: "{{ $.Values.service.main.ports.imagemaid.targetPort | default .Values.service.main.ports.imagemaid.port }}"
                startup:
                  enabled: true
                  type: "{{ .Values.service.main.ports.imagemaid.protocol }}"
                  port: "{{ $.Values.service.main.ports.imagemaid.targetPort | default .Values.service.main.ports.imagemaid.port }}"